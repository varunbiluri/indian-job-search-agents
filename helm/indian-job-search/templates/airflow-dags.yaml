{{- if .Values.airflow.enabled }}
# Airflow DAGs ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "indian-job-search.fullname" . }}-dags
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "indian-job-search.labels" . | nindent 4 }}
data:
  {{- range .Values.airflow.dags }}
  {{ .name }}.py: |
    from datetime import datetime, timedelta
    from airflow import DAG
    from airflow.operators.python import PythonOperator
    import logging

    default_args = {
        'owner': 'varun',
        'depends_on_past': False,
        'start_date': datetime(2024, 1, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 3,
        'retry_delay': timedelta(minutes=5),
    }

    dag = DAG(
        '{{ .name }}',
        default_args=default_args,
        description='Automated job search across Indian startups and companies using multi-AI models',
        schedule_interval='{{ .schedule }}',
        catchup=False,
        tags=['job-search', 'india', 'ai', 'automation', 'startups'],
    )

    def run_indian_market_searches(**context):
        """Run comprehensive job searches across Indian market"""
        logging.info("Starting Indian market job searches...")
        
        # Mock data for testing
        searches = [
            {"job_role": "Python Developer", "location": "Bangalore"},
            {"job_role": "Data Scientist", "location": "Mumbai"},
            {"job_role": "DevOps Engineer", "location": "Delhi"}
        ]
        
        context['task_instance'].xcom_push(
            key='indian_search_summary',
            value={
                'total_searches': len(searches),
                'successful_searches': len(searches),
                'total_jobs_found': len(searches) * 10,
                'timestamp': datetime.utcnow().isoformat()
            }
        )
        
        logging.info(f"Indian market search completed: {len(searches)} searches processed")

    def analyze_indian_market_trends(**context):
        """Analyze trends in Indian job market"""
        summary = context['task_instance'].xcom_pull(key='indian_search_summary')
        if summary:
            logging.info(f"Trend analysis completed: {summary['total_jobs_found']} jobs analyzed")

    def send_indian_market_alerts(**context):
        """Send alerts for Indian market opportunities"""
        summary = context['task_instance'].xcom_pull(key='indian_search_summary')
        if summary:
            logging.info(f"Alerts sent: {summary['total_searches']} searches processed")

    # Define tasks
    run_searches_task = PythonOperator(
        task_id='run_indian_market_searches',
        python_callable=run_indian_market_searches,
        dag=dag,
    )

    analyze_trends_task = PythonOperator(
        task_id='analyze_indian_market_trends',
        python_callable=analyze_indian_market_trends,
        dag=dag,
    )

    send_alerts_task = PythonOperator(
        task_id='send_indian_market_alerts',
        python_callable=send_indian_market_alerts,
        dag=dag,
    )

    # Task dependencies
    run_searches_task >> analyze_trends_task >> send_alerts_task
  {{- end }}
{{- end }}
